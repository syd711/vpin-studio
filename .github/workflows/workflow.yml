name: VPin Studio Build

on:
  push:
    branches:
      - main
  pull_request:
    branches: [ main ]
  workflow_dispatch:



  ######################################################################################################################
  # macOS x64
  ######################################################################################################################

jobs:
  mac-app-build-x64:
    name: mac-app-build-x64
    runs-on: macos-13

    steps:
      # Step 1: Checkout the repository
      - name: Checkout VPin Studio
        uses: actions/checkout@v3

      - name: Checkout Popper Client Repo
        uses: actions/checkout@v3
        with:
          repository: syd711/vpin-studio-popper-client
          path: ./vpin-studio-popper-client
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: Checkout Popper Client Repo
        uses: actions/checkout@v3
        with:
          repository: syd711/vpin-mania-rest-client
          path: ./vpin-mania-rest-client
          token: ${{ secrets.ACCESS_TOKEN }}

      # Step 2: Set up Zulu OpenJDK 17
      - name: Set up Zulu JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '17'
          architecture: 'x64'

      # Step 4: Build the Java application
      - name: Run maven build for vpin mania rest client
        working-directory: ./vpin-mania-rest-client
        run: mvn clean install -DskipTests

      - name: Run maven build for Assets API
        working-directory: ./vpin-connector-assets
        run: mvn clean install -DskipTests

      - name: Run maven build for popper client
        working-directory: ./vpin-studio-popper-client
        run: mvn clean install -DskipTests

      - name: Extract Maven project version
        run: echo ::set-output name=version::$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
        id: project

      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        run: mvn --batch-mode --update-snapshots clean package -DskipMacOSBuild=false -DmacOSBuild=true -DskipTests


      # Step 5: Prepare Java runtime by unzipping
      - name: Prepare Jave Runtime
        working-directory: .
        run: |
          tar -xzf zulu11.72.19-ca-fx-jre11.0.23-macosx_x64.tar.gz

      # Step 6: Build Directory Structure
      - name: Build structure for packaging
        working-directory: .
        run: |
          mkdir -p ./mac-build
          cp ./vpin-studio-ui/target/vpin-studio-ui.jar ./mac-build
          cp -R ./mac-package/package ./mac-build
          cp -R ./mac-package/VpinStudio.icns ./mac-build
          cp ./mac-package/jpackage_log.txt ./
      

      # Step 7: Package the Java application as a macOS .app bundle
      #The jpackage config needs to be updated to properly reference the locations of the files.
      #jpackage @jpackage_config.txt
      - name: Package as macOSx64 App
        working-directory: ./mac-build
        run: |
          #echo "Github Run Number = ${{ github.run_number }}"
          
          echo "ls . results"
          ls -al .
          echo "ls .. results"
          ls -al ..          
          #echo "ls package results"
          #ls -al package
          #echo "ls package/macos results"
          #ls -al package/macos
          jpackage --name VPin-Studio --input . --app-version ${{ steps.project.outputs.version }} --main-jar vpin-studio-ui.jar --main-class de.mephisto.vpin.ui.Studio --resource-dir package/macos --type dmg  --icon VpinStudio.icns  --dest ../ --runtime-image ../zulu11.72.19-ca-fx-jre11.0.23-macosx_x64/zulu-11.jre @../jpackage_log.txt
          #check to see if the jpackage worked.
          #echo "ls -al ../VPin-Studio.app"
          #ls -al ../VPin-Studio.app
          #echo "ls -al ../VPin-Studio.app/Contents"
          #ls -al ../VPin-Studio.app/Contents
          cp ../VPin-Studio-${{ steps.project.outputs.version }}.dmg ../VPin-Studio-Client-MacOS-x64.dmg

      # Step 8: Zip the .app bundle for easy distribution
      #Update for correct location
      #- name: Zip macOSx64 .app Bundle
     #   working-directory: ./
       # run: |
       #   echo "ls ."
       #   ls -al .  
        #  zip -r VPin-Studio-Client-MacOS-x64.zip VPin-Studio.app

      # Step 9: Upload the .app zip file as an artifact
      #Update for correct location
      - name: Upload macOSx64 Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macOS-build-x64
          path: ./VPin-Studio-Client-MacOS-x64.dmg


  ######################################################################################################################
  # macOS ARM
  ######################################################################################################################

  mac-app-build-arm64:
    name: mac-app-build-arm64
    runs-on: macos-15

    steps:
      # Step 1: Checkout the repository
      - name: Checkout VPin Studio
        uses: actions/checkout@v3

      - name: Checkout Popper Client Repo
        uses: actions/checkout@v3
        with:
          repository: syd711/vpin-studio-popper-client
          path: ./vpin-studio-popper-client
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: Checkout Popper Client Repo
        uses: actions/checkout@v3
        with:
          repository: syd711/vpin-mania-rest-client
          path: ./vpin-mania-rest-client
          token: ${{ secrets.ACCESS_TOKEN }}

      # Step 2: Set up Zulu OpenJDK 17
      - name: Set up Zulu JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '17'
          architecture: 'aarch64'

      # Step 4: Build the Java application
      - name: Run maven build for vpin mania rest client
        working-directory: ./vpin-mania-rest-client
        run: mvn clean install -DskipTests

      - name: Run maven build for Assets API
        working-directory: ./vpin-connector-assets
        run: mvn clean install -DskipTests

      - name: Run maven build for popper client
        working-directory: ./vpin-studio-popper-client
        run: mvn clean install -DskipTests

      - name: Extract Maven project version
        run: echo ::set-output name=version::$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
        id: project

      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        run: mvn --batch-mode --update-snapshots clean package -DskipMacOSBuild=false -DmacOSBuild=true -DskipTests


      # Step 5: Prepare Java runtime by unzipping
      - name: Prepare Jave Runtime
        working-directory: .
        run: |
          tar -xzf zulu11.72.19-ca-fx-jre11.0.23-macosx_aarch64.tar.gz

      # Step 6: Build Directory Structure
      - name: Build structure for packaging
        working-directory: .
        run: |
          mkdir -p ./mac-build
          cp ./vpin-studio-ui/target/vpin-studio-ui.jar ./mac-build
          cp -R ./mac-package/package ./mac-build
          cp -R ./mac-package/VpinStudio.icns ./mac-build
          cp ./mac-package/jpackage_log.txt ./
      

      # Step 7: Package the Java application as a macOS .app bundle
      #The jpackage config needs to be updated to properly reference the locations of the files.
      #jpackage @jpackage_config.txt
      - name: Package as macOS App
        working-directory: ./mac-build
        run: |
          #echo "Github Run Number = ${{ github.run_number }}"
          
          echo "ls . results"
          ls -al .
          echo "ls .. results"
          ls -al ..          
          #echo "ls package results"
          #ls -al package
          #echo "ls package/macos results"
          #ls -al package/macos
          jpackage --name VPin-Studio --input . --app-version ${{ steps.project.outputs.version }} --main-jar vpin-studio-ui.jar --main-class de.mephisto.vpin.ui.Studio --resource-dir package/macos --type dmg --icon VpinStudio.icns  --dest ../ --runtime-image ../zulu11.72.19-ca-fx-jre11.0.23-macosx_aarch64/zulu-11.jre @../jpackage_log.txt
          #check to see if the jpackage worked.
          #echo "ls -al ../VPin-Studio.app"
          #ls -al ../VPin-Studio.app
          #echo "ls -al ../VPin-Studio.app/Contents"
          #ls -al ../VPin-Studio.app/Contents
          #rename
          cp ../VPin-Studio-${{ steps.project.outputs.version }}.dmg ../VPin-Studio-Client-MacOS-arm64.dmg
          
      # Step 8: Zip the .app bundle for easy distribution
      #Skipping this in favor of dmg distribution
      #Update for correct location
      #- name: Zip macOSam64 .app Bundle
       # working-directory: ./
      #  run: |
      #    echo "ls ."
       #   ls -al .  
      #    zip -r VPin-Studio-Client-MacOS-arm64.zip VPin-Studio.app

      # Step 9: Upload the .app zip file as an artifact
      #Update for correct location
      - name: Upload macOSarm64 Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macOS-build-arm64
          path: ./VPin-Studio-Client-MacOS-arm64.dmg

  ######################################################################################################################
  # Packaging
  ######################################################################################################################

  build:
    name: Packaging
    runs-on: windows-latest
    needs: [mac-app-build-x64, mac-app-build-arm64]
    permissions:
      # write permission is required to create a github release
      contents: write
      # write permission is required for autolabeler
      # otherwise, read permission is required at least
      pull-requests: write
    steps:
      - name: Checkout VPin Studio
        uses: actions/checkout@v3

      - name: Checkout Popper Client Repo
        uses: actions/checkout@v3
        with:
          repository: syd711/vpin-studio-popper-client
          path: ./vpin-studio-popper-client
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: Checkout VPin Mania Rest Client
        uses: actions/checkout@v3
        with:
          repository: syd711/vpin-mania-rest-client
          path: ./vpin-mania-rest-client
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-package: 'jdk+fx'
          java-version: '11.0.21+9'
          cache: 'maven'

      - name: Run maven build for vpin mania rest client
        working-directory: ./vpin-mania-rest-client
        run: mvn clean install -DskipTests

      - name: Run maven build for Assets API
        working-directory: ./vpin-connector-assets
        run: mvn clean install

      - name: Run maven build for popper client
        working-directory: ./vpin-studio-popper-client
        run: mvn clean install

      - name: Cache local Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Extract Windows Runtime
        run: |
          unzip -o java-runtime.zip -d ${{ github.workspace }}/java-runtime

      - name: List files in the runtime folder
        run: |
          ls ${{ github.workspace }}/java-runtime/

      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}

      - name: List JDK
        run: |
          ls "C:\hostedtoolcache\windows\"
          ls "C:\hostedtoolcache\windows\Java_Zulu_jdk+fx\"
          ls "C:\hostedtoolcache\windows\Java_Zulu_jdk+fx\11.0.21-9\x64"

      - name: Copy .dll
        run: |
          copy ${{ github.workspace }}/resources/jvm/jinput-dx8_64.dll "C:\hostedtoolcache\windows\Java_Zulu_jdk+fx\11.0.21-9\x64\bin\"

      - name: Build with Maven
        run: mvn --batch-mode --update-snapshots clean package

      - name: Download macOS x64 artifact
        uses: actions/download-artifact@v4
        with:
          name: macOS-build-arm64
          path: ./Output/VPin-Studio/

      - name: Download macOS arm64 artifact
        uses: actions/download-artifact@v4
        with:
          name: macOS-build-x64
          path: ./Output/VPin-Studio/

      - name: List files in the Output folder
        run: |
          ls ${{ github.workspace }}/Output/VPin-Studio/

      - name: Set Release Version
        id: set-release-version
        if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main'
        run:  | 
          $version = mvn "--batch-mode" org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate "-Dexpression=project.version" "-q" "-DforceStdout"
          echo "::set-output name=version::${version}"

      - name: Draft Release
        uses: softprops/action-gh-release@v1
        if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main'
        with:
          body_path: RELEASE_NOTES.md
          draft: true
          tag_name: ${{ steps.set-release-version.outputs.version }}
          files: |
            ./Output/VPin-Studio/VPin-Studio-Client-Installer*.exe
            ./Output/VPin-Studio/VPin-Studio-Full-Installer*.exe
            ./Output/VPin-Studio/VPin-Studio-Server.zip
            ./Output/VPin-Studio/VPin-Studio.zip
            ./Output/VPin-Studio/VPin-Studio-Client-linux-x64.zip
            ./Output/VPin-Studio/VPin-Studio-Client-MacOS-arm64.dmg
            ./Output/VPin-Studio/VPin-Studio-Client-MacOS-x64.dmg
            ./Output/VPin-Studio/vpin-studio-ui-jar.zip
        env:
          GITHUB_REPOSITORY: https://github.com/syd711/vpin-studio
